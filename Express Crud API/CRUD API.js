const express = require('express');
const bodyParser = require('body-parser');
const jwt = require('jsonwebtoken');
const session = require('express-session');
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const app = express();
const port = 2220;

const randomKey = (length) => {
  let r = '';
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  const len = chars.length;
  for (let i = 0; i < length; i++) {
    r += chars.charAt(Math.floor(Math.random() * len));
  }
  return r;
};

const secretKey = randomKey(32);
console.log(secretKey);

app.use(bodyParser.json());

// Dummy user data
const users = [
    { id: 1, username: 'Misha', password: 'pass1234' },
    { id: 2, username: 'Idk', password: 'Idk2' },
  ];

// Session middleware
app.use(session({
    secret: secretKey,
    resave: false,
    saveUninitialized: true,
    cookie: {
      expires: new Date(Date.now() + 3600000), // Expires in 1 hour from now
    },
  }));

// Middleware to check for valid token in session
const checkToken = (req, res, next) => {
  // Check if authToken is present in session
  const authToken = req.session.token;
  if (!authToken) {
    // If authToken is not present, redirect to login page
    return res.redirect('/login.html');
  }
  verifyToken(req, res, authToken);
  // If authToken is present, proceed to the next middleware or route handler
  next();
};

// Middleware to verify JWT token globally
app.use((req, res, next) => {
    console.log("I am at line 20, " + req.path);
    if (req.path === '/' || req.path === '/index.html' || req.path === '/login.js' || req.path === '/login') {
        // Skip authentication for login route
        return next();
        }
    let token;

  // Check if token is in authorization header
  if (req.headers['authorization']) {
    token = req.headers['authorization'];
  } else {
    // Check if token is in URL query parameters
    // const tokenQueryParam = req.query.token;
    // if (tokenQueryParam) {
    //   token = tokenQueryParam;
    // }
    
    // Read token from session
    token = req.session.token;
    console.log("Token: " + token);
  }

  if (!token) {
    // Redirect unauthenticated users to the login page
    return res.redirect('/index.html');
    }
    // const token = req.headers['authorization'];
  
    jwt.verify(token, secretKey, (err, decoded) => {
      if (err) {
        return res.status(403).json({ error: 'Invalid token' });
      }
  
      req.userId = decoded.userId;
      next();
    });
  });

let query;

// Serve static files from the 'public' folder
app.use(express.static(path.join(__dirname, 'public')));

// Connect to DB
const db = new sqlite3.Database('CRUD.db', sqlite3.OPEN_READWRITE);

// console.log is used for printing in terminal
// Browsers can only use get requests

// Middleware to redirect unauthenticated users to login page
// function redirectToLogin(req, res, next) {
//     if (!req.headers['authorization']) {
//       return res.redirect('/index.html');
//     }
//     next();
//   }

// Token verification middleware
function verifyToken(req, res, token) {
    // const token = req.headers['authorization'];
  
    if (!token) {
      return res.status(401).json({ error: 'Token is required' });
    }
  
    jwt.verify(token, secretKey, (err, decoded) => {
      if (err) {
        return res.status(403).json({ error: 'Invalid token' });
      }
  
      // req.userId = decoded.userId;
  });
}

// Register
app.post('/register', (req, res) => {
  const { username, password } = req.body;

  // Check if username is already taken
  if (users.some(u => u.username === username)) {
      return res.status(400).json({ error: 'Username already exists' });
  }

  // Create a new user object
  const newUser = {
      id: users.length + 1,
      username,
      password
  };

  // Add the new user to the users array
  users.push(newUser);

  res.json({ message: 'User registered successfully' });
});

// Login route
app.post('/login', (req, res) => {

    const { username, password } = req.body;
    
    console.log("Username = " + username);

    const user = users.find(u => u.username === username && u.password === password);
    console.log("User = ", user);
    if (!user) {
      return res.status(401).json({ error: 'Invalid username or password' });
    }
  
    const token = jwt.sign({ userId: user.id }, secretKey, { expiresIn: '1h' });

    req.session.token = token;
  
    res.status(200).json({ token });
  });

app.get('/books.html', checkToken, (req, res) => {
    // If authToken is present in session, render books.html
    res.sendFile(__dirname + '/public/books.html');
  });

// Creating a record
app.post('/books', checkToken, (req, res) => {

    const { title, author } = req.body;

    if (!title && !author) {
        return res.status(400).send('Title and Author are required');
    }

    query = 'INSERT INTO books (id, title, author) VALUES (NULL, ?, ?)';

    db.run(query, [title, author], (err) => {
        if (err) {
            console.error(err.message);
            return res.status(500).send('Error creating book record');
        }

        console.log ("Book added");
        res.status(200).send('Book added successfully');
    });
});

// Searching
app.post('/books/search', checkToken, (req, res) => {
    
    var { q } = req.body;
    console.log(q);

    if (!q) {
        return res.status(400).send('Title or Author required');
    }
    q = '%' + q + '%';

    query = "SELECT * FROM BOOKS WHERE title LIKE ? or author LIKE ?"; 

    db.all (query, [q, q], (err, rows) => {
        if (err) {
            console.error(err.message);
            return res.status(500).send('Error retrieving book record');
        }

        console.log ("Books retrieved", rows);
        res.status(200);
        res.json(rows);
    });

});

// Reading all records
app.get('/books', checkToken, (req, res) => {
    query = 'SELECT * FROM BOOKS';
    db.all(query, (err, rows) => {
        if (err) {
            console.error(err.message);
            return res.status(500).send('Error displaying book records');
        }

        console.log ("Displayed all rows");
        res.status(200);
        res.json(rows);
    });
});

// Update record
app.put('/books/:id', checkToken, (req, res) => {

    const bID = parseInt(req.params.id);

    const { title, author } = req.body;

    if (title) {
        query = `UPDATE books SET title = ? WHERE id = ?`;
        db.run (query, [title, bID], (err) => {
            if (err) {
                console.error(err.message);
                return res.status(500).send('Error updating book record');
            }
    
            console.log(`Book title updated`);
        });
    }

    if (author) {
        query = `UPDATE books SET author = ? WHERE id = ?`;
        db.run (query, [author, bID], (err) => {
            if (err) {
                console.error(err.message);
                return res.status(500).send('Error updating book record');
            }
    
            console.log(`Book author updated`);
        });
    }

    res.status(200).send('Book updated successfully');
});

// Delete record
app.delete ('/books/:id', checkToken, (req, res) => {
    
    const bID = parseInt(req.params.id);
    query = 'DELETE FROM books WHERE id = ?';

    db.run (query, [bID], (err) => {
        if (err) {
            console.error(err.message);
            return res.status(500).send('Error deleting book record');
        }

        console.log('Book deleted');
        res.status(200).send('Book deleted successfully');
    });
});

app.listen(port, () => {
    console.log(`Server running on port: http://localhost:${port}`);
});